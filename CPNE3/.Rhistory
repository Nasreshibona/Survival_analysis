if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
update.packages(ask = FALSE)
updateR()
library(maps)
setwd("~/Desktop/data visualization/example data")
library(tidyverse)
data <- read_csv("Last 120 days.tsv")
data <- read.csv("Last 120 days.tsv")
hist(, col = 'blue', border = "white")
head(data)
data <- as.data.frame(data)
hist(, col = 'blue', border = "white")
data <- read.csv("Last 120 days.tsv")
data <- as.data.frame(data)
hist(, col = 'blue', border = "white")
data <- read.csv("Last 120 days.csv")
data <- as.data.frame(data)
hist(, col = 'blue', border = "white")
hist(data$Frequency, col = 'blue', border = "white")
hist(data$Date, col = 'blue', border = "white")
hist(data$Lineage, col = 'blue', border = "white")
hist(data$Frequency, col = 'blue', border = "white")
hist(data$X..Frequency, col = 'blue', border = "white")
library(plotly)
data <- read.csv("Last 120 days.csv")
data <- read.csv("Last 120 days.csv")
plot_ly(
data = data,
x = ~data$Lineage,
type = "histogram"
)
plot_ly(
data = data,
x = ~data$Date,
type = "histogram"
)
plot_ly(
data = data,
x = ~data$Frequency,
type = "histogram"
)
library(tidyverse)
library(plotly)
data <- read.csv("Last 120 days.csv")
plot_ly(
data = data,
x = ~data$Frequency,
type = "histogram"
)
data%>%
group_by(data$Lineage) %>%
do(p=plot_ly(., x = ~data$Lineage,name =~state, type = "histogram")) %>%
subplot(nrows = 1, shareX = TRUE, shareY = TRUE)
data%>%
group_by(Lineage) %>%
do(p=plot_ly(., x = ~data$Lineage,name =~state, type = "histogram")) %>%
subplot(nrows = 1, shareX = TRUE, shareY = TRUE)
data%>%
group_by(Lineage) %>%
do(p=plot_ly(., x = ~data$Lineage,name =~Lineage, type = "histogram")) %>%
subplot(nrows = 1, shareX = TRUE, shareY = TRUE)
dim(data)
ggplot(data, aes(x = Date)) +
geom_histogram(aes(color = lineage), fill = "white",
position = "identity", bins = 30) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
data <- read.csv("Last 120 days.csv")
plot_ly(
data = data,
x = ~data$Frequency,
type = "histogram"
)
dim(data)
data%>%
group_by(Lineage) %>%
do(p=plot_ly(., x = ~data$Lineage,name =~Lineage, type = "histogram")) %>%
subplot(nrows = 1, shareX = TRUE, shareY = TRUE)
ggplot(data, aes(x = Date)) +
geom_histogram(aes(color = lineage), fill = "white",
position = "identity", bins = 30) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
ggplot(data, aes(x = Date)) +
geom_histogram(aes(color = data$Lineage), fill = "white",
position = "identity", bins = 30) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
ggplot(data, aes(x = Date)) +
geom_histogram(aes(color = Lineage), fill = "white",
position = "identity", bins = 30) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
ggplot(data, aes(x = Date)) +
geom_histogram(aes(color = Lineage), fill = "white",
position = "identity") +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
ggplot(data, aes(x = Date)) +
geom_histogram(aes(color = Lineage), fill = "white",
position = "identity", stat="count") +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
library(tidyverse)
library(plotly)
data <- read.csv("Last 120 days.csv")
class(data)
plot_ly(
data = data,
x = ~data$Frequency,
type = "histogram"
)
dim(data)
data%>%
group_by(Lineage) %>%
do(p=plot_ly(., x = ~data$Lineage,name =~Lineage, type = "histogram")) %>%
subplot(nrows = 1, shareX = TRUE, shareY = TRUE)
ggplot(data, aes(x = Date)) +
geom_histogram(aes(color = Lineage), fill = "white",
position = "identity") +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
ggplot(data, aes(x = Lineage)) +
geom_histogram(aes(color = Lineage), fill = "white",
position = "identity") +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
library(tidyverse)
library(plotly)
data <- read.csv("Last 120 days.csv")
class(data)
ggplot(data, aes(x = Lineage)) +
geom_histogram(aes(color = Lineage), fill = "white",
position = "identity") +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
library(tidyverse)
library(plotly)
data <- read.csv("Last 120 days.csv")
ggplot(data, aes(x = Date)) +
geom_histogram(aes(color = Lineage), fill = "white",
position = "identity", bins = 30) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
data$Lineage<- as.numeric(as.character(data$Lineage))
data$Lineage<- as.numeric(as.character(data$Lineage))
ggplot(data, aes(x = Date)) +
geom_histogram(aes(color = Lineage), fill = "white",
position = "identity", bins = 30) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
ggplot(data, aes(x = Lineage)) +
geom_histogram(aes(color = Lineage), fill = "white",
position = "identity", bins = 30) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
library(tidyverse)
library(plotly)
data <- read.csv("Last 120 days.csv")
data$Lineage<- as.numeric(as.character(data$Lineage))
ggplot(data, aes(x = Lineage)) +
geom_histogram(aes(color = Lineage), fill = "white",
position = "identity", bins = 30) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
data$Lineage<- as.numeric(data$Lineage)
ggplot(data, aes(x = Lineage)) +
geom_histogram(aes(color = Lineage), fill = "white",
position = "identity", bins = 30) +
scale_color_manual(values = c("#00AFBB", "#E7B800"))
ggplot(data, aes(x = Lineage)) +
geom_histogram(aes(color = Lineage), fill = "white",
position = "identity", bins = 30) +
stat_align()+
scale_color_manual(values = c("#00AFBB", "#E7B800"))
ggplot(data, aes(x = Lineage)) +
geom_histogram(aes(color = Lineage), fill = "white",
position = "identity", bins = 30) +
stat_align()+
scale_color_manual(values = c("#00AFBB", "#E7B800"))
library(ggplot2)
library(tidyverse)
library(shinydashboard)
library(countrycode)
data <- read.csv("metadata_t.csv")
data$code <- countrycode(data$region, "country.name", "iso3c")
data
write.csv(data, "data_metadate.csv")
library(maps)
library(tidyverse)
library(rbokeh)
data(world.cities)
caps <- dplyr::filter(world.cities, capital == 1)
caps$region <- caps$country.etc
data <- read_csv("data_metadate.csv")
mapdata <- merge(data , caps)
mapdata
#write_csv(mapdata, "test.csv")
dim(mapdata)
plot <- suppressWarnings(figure(width = 800, height = 450, padding_factor = 0) %>%
ly_map("world", col = "red") %>%
ly_points(long, lat, data = mapdata, size = 5,
hover = c(region, sample_ID, variant)))
plot
plot <- suppressWarnings(figure(width = 800, height = 450, padding_factor = 0) %>%
ly_map("world", col = "blue") %>%
ly_points(long, lat, data = mapdata, size = 5,
hover = c(region, sample_ID, variant)))
plot
plot <- suppressWarnings(figure(width = 800, height = 450, padding_factor = 0) %>%
ly_map("world", col = "green") %>%
ly_points(long, lat, data = mapdata, size = 5,
hover = c(region, sample_ID, variant)))
plot <- suppressWarnings(figure(width = 800, height = 450, padding_factor = 0) %>%
ly_map("world", col = "green") %>%
ly_points(long, lat, data = mapdata, size = 5,
hover = c(region, sample_ID, variant)))
plot
install.packages("gtsummary")
library(gtsummary)
library(tidyverse)
data <- read_csv("data_metadate.csv")
table1 <-
trial %>%
tbl_summary(include = c(data$region, data$Lineage, data$variant))
table1 <-
trial %>%
tbl_summary(include = c(region, Lineage,variant))
table1 <-
data %>%
tbl_summary(include = c(region, Lineage,variant))
table1
table2 <-
tbl_summary(
data,
include = c(region, Lineage, variant),
by = trt, # split table by group
missing = "no" # don't list missing data separately
) %>%
add_n() %>% # add column with total number of non-missing observations
add_p() %>% # test for a difference between groups
modify_header(label = "**Variable**") %>% # update the column header
bold_labels()
table2 <-
tbl_summary(
data,
include = c(region, Lineage, variant),
missing = "no" # don't list missing data separately
) %>%
add_n() %>% # add column with total number of non-missing observations
add_p() %>% # test for a difference between groups
modify_header(label = "**Variable**") %>% # update the column header
bold_labels()
table1
table2 <-
tbl_summary(
data,
include = c(region, Lineage, variant),
missing = "no" # don't list missing data separately
) %>%
add_n() %>% # add column with total number of non-missing observations
add_p() %>% # test for a difference between groups
modify_header(label = "**Variable**") %>% # update the column header
bold_labels()
table2 <-
tbl_summary(
data,
include = c(region, Lineage, variant),
by = variant, # split table by group
missing = "no" # don't list missing data separately
) %>%
add_n() %>% # add column with total number of non-missing observations
add_p() %>% # test for a difference between groups
modify_header(label = "**Variable**") %>% # update the column header
bold_labels()
table2
table2 <-
tbl_summary(
data,
include = c(region, Lineage, variant),
by = variant, # split table by group
missing = "no" # don't list missing data separately
) %>%
add_n() %>% # add column with total number of non-missing observations
#add_p() %>% # test for a difference between groups
modify_header(label = "**Variable**") %>% # update the column header
bold_labels()
table2
mod1 <- glm(response ~ variant + Lineage + region, data, family = binomial)
mod1 <- glm(data$Prevalence ~ variant + Lineage + region, data, family = binomial)
mod1 <- glm(Prevalence ~ variant + Lineage + region, data, family = binomial)
as.integer(c(data$region, data$Lineage, data$Prevalence, data$variant))
mod1 <- glm(Prevalence ~ variant + Lineage + region, data, family = binomial)
mod1 <- glm(Prevalence ~ variant + Lineage + count, data, family = binomial)
mod1 <- glm(Prevalence ~ count, data, family = binomial)
setwd("~/Desktop/intermediate/geo_data/survival analysis/CD109")
library(survival)
library(ranger)
library(ggplot2)
library(dplyr)
library(ggfortify)
library(survminer)
data <- read.table("km_226545_at.csv", row.names=1,header=TRUE, sep=",",
stringsAsFactors=FALSE)
k1 <- which(data$Risk=="I" &  data$Time > 365 & data$Time < 3650)
length(k1)
data_k <- data[k1,]
dim(data_k)
median(data_k$Time)
data$Time
data$Time <- as.numeric(data$Time)
#survfit(Surv(Time, status) ~ 1, data = data)
median(data$score)
data <- mutate(data, status = ifelse((score < 0.5539854), 0, 1),
status = factor(status))
#write.csv(data, "update_data.csv")
data$status
data$status <- as.numeric(data$Status)
fit <- survfit(Surv(Time, status) ~ data$Expression, data = data)
autoplot(fit, conf.int = F)
data
ggsurvplot(fit, xlab= "Time in days",
pval = TRUE, conf.int = F,
data = data,
title ="\t\t\t\t CD109" ,
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
dpi=600,
risk.table = TRUE,
palette = c( "red" , "blue"),###c("#E7B800", "#2E9FDF"),
font.family = "Arial",
ggtheme = theme_classic2(base_size = 15), # Change ggplot2 theme
font.tickslab = c(15),
text = element_text(size = 15))
res.cox <- coxph(Surv(Time, status) ~Expression, data = data)
summary(res.cox)
res.cox <- coxph(Surv(Time, status) ~Expression, data = data)
summary(res.cox)
setwd("~/Desktop/intermediate/geo_data/survival analysis/CPNE3")
library(survival)
library(ranger)
library(ggplot2)
library(dplyr)
library(ggfortify)
library(survminer)
data <- read.table("km_X202119_s_at.csv", row.names=1,header=TRUE, sep=","
, stringsAsFactors=FALSE)
data$Time <- data$Time
data
data$Time <- as.numeric(data$Time)
#survfit(Surv(Time, status) ~ 1, data = data)
median(data$score)
data <- mutate(data, status = ifelse((score < 0.7290248), 0, 1),
status = factor(Status))
#write.csv(data, "update_data.csv")
data$status
data$status <- as.numeric(data$Status)
fit <- survfit(Surv(Time, status) ~ data$Expression, data = data)
autoplot(fit, conf.int = F)
data
ggsurvplot(fit, xlab="Time in days",
pval = TRUE, conf.int = F,
data = data,
title ="\t\t\t\t CPNE3" ,
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
dpi=600,
risk.table = TRUE,
ggtheme = theme_classic2(base_size = 15), # Change ggplot2 theme
palette = c( "red", "blue"),
font.tickslab = c(15),
text = element_text(size = 15),
font.family = "Arial")###c("#E7B800", "#2E9FDF")
head(data)
res.cox <- coxph(Surv(Time, status) ~Expression, data = data)
summary(res.cox)
